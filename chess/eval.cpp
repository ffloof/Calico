
int phases[7] = {0,0,2,2,3,8,0};
int earlyPieces[7] = {0,82,337,365,477,1025,0};
int latePieces[7] = {0,94,281,297,512,936,0};

int earlyPSQT[7][64] = {
    {},
    { // Pawn
          0,   0,   0,   0,   0,   0,   0,   0,
        138, 153, 109, 114, 107, 129,  99,  88,
         44,  53,  55,  49,  60,  54,  53,  32,
          9,  18,   9,  13,  10,   8,  17,  -3,
         -7,   3,  -4,   2,   5,  -1,   6, -13,
        -11,   1,  -5,  -4,   1,  -1,  16, -10,
        -11,   3,  -6,  -6,  -1,  12,  20, -14,
          0,   0,   0,   0,   0,   0,   0,   0,
    }, 
    { // Knight
        -112, -63, -23, -38,  15, -62, -39,-103,
         -49, -24,  23,  17,   7,  18,  -8, -34,
         -35,  20,  23,  37,  41,  60,  27,   1,
         -13,  10,  20,  37,  29,  40,  13,   2,
         -15,  -1,  16,  19,  22,  18,  12, -13,
         -23,  -6,   5,  12,  14,   7,   2, -19,
         -35, -36, -11,  -4,  -1,  -1, -18, -31,
         -67, -36, -40, -24, -19, -23, -34, -43,
    },
    { // Bishop
        -21,  -8, -46, -22, -16, -25,  -5, -16,
        -17,   6,  -5, -12,  13,  23,   7, -30,
         -7,  14,  21,  19,  16,  28,  18,   1,
         -3,   7,  15,  29,  25,  23,   5,   0,
         -6,   8,  13,  22,  20,  11,   3,  -2,
         -6,   6,  11,  12,  13,  15,   5,  -2,
         -5,  -1,   4,   0,   5,   6,   9, -13,
        -28,  -6, -18, -13, -11, -14, -22, -19,
    },
    { // Rook
         22,  26,  25,  33,  37,  10,  19,  24,
         19,  22,  35,  36,  38,  35,  17,  23,
          1,  13,  16,  20,  10,  21,  28,   6,
        -10,  -4,  10,  13,  13,  18,  -4,  -9,
        -16, -10,  -2,   1,   2,  -6,  -1, -17,
        -24, -12, -10,  -9,  -2,  -6,  -6, -24,
        -25, -11, -10,  -3,  -5,   1,  -8, -37,
        -14,  -5,   2,   8,   5,  -3, -16, -23,
    },
    { // Queen
        -18,  11,  25,  19,  43,  31,  26,  32,
        -20,  -9,  13,  21,  21,  41,  29,  27,
        -16,  -5,   8,  28,  38,  45,  33,  33,
        -12,  -2,   4,  14,  28,  28,  27,  18,
        -13,   1,   5,  18,  14,  15,  21,  10,
        -15, -12,   2,   2,   2,   9,  12,   5,
        -28, -15,  -9,  -7,  -4,  -4, -19, -15,
        -17, -23, -15, -16, -10, -28, -25, -45,
    },
    { // King
        -65,  23,  16, -15, -56, -34,   2,  13,
         29,  -1, -20,  -7,  -8,  -4, -38, -29,
         -9,  24,   2, -16, -20,   6,  22, -22,
        -17, -20, -12, -27, -30, -25, -14, -36,
        -49,  -1, -27, -39, -46, -44, -33, -51,
        -14, -14, -22, -46, -44, -30, -15, -27,
          1,   7,  -8, -64, -43, -16,   9,   8,
        -15,  36,  12, -54,   8, -28,  24,  14,
    }
};

int latePSQT[7][64] = {
    {},
    {},
    {},
    {},
    {},
    {},
    {
        -74, -35, -18, -18, -11,  15,   4, -17,
        -12,  17,  14,  17,  17,  38,  23,  11,
         10,  17,  23,  15,  20,  45,  44,  13,
         -8,  22,  24,  27,  26,  33,  26,   3,
        -18,  -4,  21,  24,  27,  23,   9, -11,
        -19,  -3,  11,  21,  23,  16,   7,  -9,
        -27, -11,   4,  13,  14,   4,  -5, -17,
        -53, -34, -21, -11, -28, -14, -24, -43
    },
};

void initPSQT(){
    for(int x=1;x<6;x++){
        for(int y=0;y<64;y++) {
            latePSQT[x][y] = earlyPSQT[x][y];
        }
    }

    for(int x=0;x<7;x++){
        for(int y=0;y<64;y++){
            earlyPSQT[x][y] += earlyPieces[x];
            latePSQT[x][y] += latePieces[x];
        }
    }
}

int evaluate(board* b) {
    int earlyScore = 0;
    int lateScore = 0;
    int phase = 0;

    for(int i=0;i<128;i++){
        int8_t piece = b->squares[i];
        if(piece == EMPTY) continue;
        
        int j = (i + (i & 7)) >> 1;

        if (piece > 0){
            earlyScore += earlyPSQT[abs(piece)][j];
            lateScore += latePSQT[abs(piece)][j];
        } else {
            j = j ^ 56;
            earlyScore -= earlyPSQT[abs(piece)][j];
            lateScore -= latePSQT[abs(piece)][j];
        }

        phase += phases[abs(piece)];
    }

    if (phase > 44) phase = 44;
    int score = ((phase * earlyScore) + ((44-phase)*lateScore))/44;

    if (b->whiteToMove) return score;
    return -score;
}