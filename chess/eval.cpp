#include "misc.cpp"
#include "nnue.cpp"

int standard[120] = {
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, 56, 57, 58, 59, 60, 61, 62, 63, -1,
    -1, 48, 49, 50, 51, 52, 53, 54, 55, -1,
    -1, 40, 41, 42, 43, 44, 45, 46, 47, -1,
    -1, 32, 33, 34, 35, 36, 37, 38, 39, -1,
    -1, 24, 25, 26, 27, 28, 29, 30, 31, -1,
    -1, 16, 17, 18, 19, 20, 21, 22, 23, -1,
    -1,  8,  9, 10, 11, 12, 13, 14, 15, -1,
    -1,  0,  1,  2,  3,  4,  5,  6,  7, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
};

int convert[14] = {
    0, 0, 12, 6, 11, 5, 10, 4, 9, 3, 8, 2, 7, 1, 
};

void setup_nnue(){
    nnue_init("nn-04cf2b4ed1da.nnue");
    nnue_evaluate_fen("rnb1kbnr/pppp1ppp/8/4P3/7q/8/PPPPP1PP/RNBQKBNR w KQkq - 1 3");
}

int evaluate(board* b){
    int *pieces = new int[33];
    int *squares = new int[33];
    
    pieces[0] = 1;
    pieces[1] = 7;
    squares[0] = standard[b->kings[1]];
    squares[1] = standard[b->kings[0]];

    int i = 2;
    for (int sq = A8;sq<=H1;sq++) {
        if (b->squares[sq] <= BORDER || b->squares[sq] >= KING) continue;
        
        pieces[i] = convert[b->squares[sq]];
        squares[i] = standard[sq];
        i++;
        if (i > 33) {
            std::cout << "NOT NORMAL";
        }
    }

    pieces[i] = 0;

    int score = nnue_evaluate(!b->whiteToMove, pieces, squares);

    delete[] pieces;
    delete[] squares;
    return score;
}


int mailbox[64] = {
    21, 22, 23, 24, 25, 26, 27, 28,
    31, 32, 33, 34, 35, 36, 37, 38,
    41, 42, 43, 44, 45, 46, 47, 48,
    51, 52, 53, 54, 55, 56, 57, 58,
    61, 62, 63, 64, 65, 66, 67, 68,
    71, 72, 73, 74, 75, 76, 77, 78,
    81, 82, 83, 84, 85, 86, 87, 88,
    91, 92, 93, 94, 95, 96, 97, 98
};



int phases[14] = {0,0,0,0,2,2,2,2,3,3,8,8,0};

// Pack (middleGame, endGame) scores into one integer to save operations
#define S(a, b) (a + (b * 0x10000))

int material[7] = {S(0,0),S(115,119),S(484,251),S(501,254),S(649,492),S(1355,951),S(0,0)};

int activity[7][64] = {
    {},
    { // Pawn
        S(0,0),S(0,0),S(0,0),S(0,0),S(0,0),S(0,0),S(0,0),S(0,0),
        S(48,181),S(53,197),S(39,173),S(65,145),S(80,136),S(88,145),S(5,193),S(-14,176),
        S(-28,106),S(-7,108),S(30,94),S(9,73),S(39,62),S(76,41),S(9,84),S(-19,73),
        S(-21,22),S(7,26),S(-3,8),S(21,-3),S(31,-16),S(10,-7),S(-6,13),S(-9,-1),
        S(-39,-2),S(-14,9),S(-1,-19),S(21,-24),S(19,-20),S(13,-26),S(-4,-5),S(-18,-21),
        S(-30,-12),S(-12,0),S(4,-17),S(4,-7),S(18,-15),S(9,-17),S(27,-14),S(12,-26),
        S(-34,0),S(1,1),S(-13,0),S(-6,-2),S(4,-7),S(38,-15),S(41,-13),S(4,-31),
        S(0,0),S(0,0),S(0,0),S(0,0),S(0,0),S(0,0),S(0,0),S(0,0),   
    }, 
    { // Knight
        S(-245,6),S(-27,-18),S(-75,24),S(-58,25),S(53,0),S(-115,0),S(-79,10),S(-124,-66),
        S(-71,12),S(-14,27),S(116,7),S(51,28),S(127,7),S(132,0),S(37,-1),S(29,-14),
        S(22,10),S(49,18),S(69,49),S(109,41),S(151,17),S(188,17),S(105,13),S(21,13),
        S(41,19),S(56,50),S(48,56),S(97,70),S(60,67),S(92,58),S(39,45),S(85,4),
        S(16,9),S(46,33),S(60,55),S(49,59),S(68,62),S(66,46),S(44,29),S(2,29),
        S(3,10),S(29,32),S(47,26),S(57,47),S(72,42),S(54,32),S(57,19),S(4,12),
        S(12,3),S(3,11),S(33,21),S(47,26),S(44,26),S(53,25),S(38,3),S(18,3),
        S(-22,-39),S(8,0),S(4,20),S(21,22),S(21,21),S(18,27),S(0,-1),S(-61,1),
    },
    { // Bishop
        S(-19,17),S(-49,19),S(-30,20),S(-88,38),S(-89,36),S(-28,16),S(6,11),S(-31,33),
        S(-10,18),S(30,22),S(2,31),S(16,18),S(26,23),S(103,1),S(15,24),S(51,-4),
        S(4,30),S(25,23),S(82,17),S(35,40),S(84,11),S(94,23),S(85,19),S(71,14),
        S(-6,35),S(17,38),S(42,28),S(59,30),S(60,36),S(11,23),S(29,24),S(27,10),
        S(22,9),S(26,18),S(28,36),S(65,27),S(64,22),S(17,30),S(32,19),S(12,13),
        S(48,1),S(57,19),S(53,28),S(27,33),S(39,34),S(47,20),S(37,18),S(40,14),
        S(27,20),S(59,3),S(42,13),S(28,21),S(42,27),S(61,9),S(76,11),S(36,11),
        S(50,-1),S(34,13),S(39,11),S(27,30),S(18,26),S(15,22),S(54,-1),S(32,11),
    },
    { // Rook
        S(69,42),S(69,37),S(76,27),S(106,18),S(91,29),S(126,16),S(71,35),S(48,31),
        S(17,42),S(3,62),S(45,44),S(80,39),S(55,37),S(111,30),S(116,22),S(80,20),
        S(21,40),S(6,43),S(22,46),S(53,38),S(65,28),S(76,31),S(128,19),S(69,27),
        S(-11,37),S(6,35),S(16,40),S(31,35),S(13,40),S(43,36),S(54,25),S(55,24),
        S(-20,33),S(-35,40),S(-20,50),S(1,39),S(14,34),S(7,39),S(22,29),S(10,18),
        S(-22,27),S(-1,32),S(0,27),S(25,27),S(26,28),S(13,18),S(57,9),S(8,20),
        S(-10,25),S(1,30),S(3,38),S(17,33),S(26,22),S(38,24),S(60,27),S(-22,32),
        S(11,23),S(17,32),S(41,23),S(45,31),S(53,15),S(42,16),S(11,22),S(27,-12),
    },
    { // Queen
        S(18,41),S(30,41),S(63,41),S(56,65),S(98,50),S(88,63),S(31,29),S(31,73),
        S(-3,69),S(-15,63),S(-1,77),S(-30,121),S(-16,109),S(139,83),S(42,101),S(180,-49),
        S(-1,30),S(3,45),S(52,48),S(41,62),S(80,89),S(106,49),S(154,10),S(101,29),
        S(-3,43),S(12,64),S(7,55),S(11,92),S(15,96),S(9,124),S(11,107),S(47,74),
        S(5,32),S(19,47),S(6,53),S(4,97),S(29,68),S(21,71),S(30,67),S(16,68),
        S(15,12),S(30,1),S(16,51),S(24,45),S(22,58),S(34,51),S(33,79),S(15,56),
        S(23,37),S(30,41),S(36,12),S(42,29),S(48,21),S(70,-14),S(59,-18),S(35,24),
        S(39,11),S(40,-9),S(55,-14),S(57,-4),S(49,26),S(15,11),S(11,10),S(40,-12),
    },
    { // King
        S(44,-51),S(33,-23),S(19,-19),S(39,-25),S(81,-13),S(68,-10),S(31,-17),S(36,-39),
        S(27,-28),S(104,-12),S(77,-12),S(49,-7),S(51,-1),S(78,12),S(15,18),S(0,4),
        S(48,-28),S(105,-2),S(49,2),S(54,0),S(14,11),S(49,25),S(59,32),S(-24,8),
        S(-3,-26),S(38,-9),S(39,9),S(-10,17),S(-3,14),S(-25,27),S(2,16),S(-54,10),
        S(28,-42),S(24,-9),S(22,6),S(-55,27),S(-57,29),S(-101,35),S(-56,14),S(-83,8),
        S(18,-36),S(18,-8),S(-70,17),S(-99,31),S(-108,35),S(-65,26),S(-19,10),S(-42,-8),
        S(29,-41),S(-15,-5),S(-45,5),S(-100,27),S(-77,25),S(-46,19),S(21,-5),S(21,-25),
        S(-26,-39),S(38,-31),S(8,-16),S(-80,-8),S(-4,-24),S(-32,-12),S(55,-45),S(44,-76),
    }
};



int PST[14][120] = {};

void initPSQT(){
    for(int piecetype=0;piecetype<=6;piecetype++) {
        for(int i=0;i<64;i++){
            int idx_white = mailbox[i];
            int idx_black = mailbox[i^56];
            PST[(piecetype*2)+1][idx_white] = activity[piecetype][i] + material[piecetype];
            PST[(piecetype*2)][idx_black] = -(activity[piecetype][i] + material[piecetype]);
        }
    }
}

void board::updateEval(int index, int8_t oldPiece, int8_t newPiece) {
    score -= PST[oldPiece][index];
    score += PST[newPiece][index];
    phase -= phases[oldPiece];
    phase += phases[newPiece];
}

int isolated[10] = { S(0,0),S(-13,7),S(-22,-3),S(-27,-5),S(-37,-8),S(-27,-7),S(-26,-1),S(-20,-3),S(-31,14),S(0,0), };

/*
int evaluate(board* b) {
    // king safety
    int wKingFile = b->kings[1] % 10;
    int bKingFile = b->kings[0] % 10;

    int score = b->score;

    int16_t earlyScore = (int16_t) score;
    int16_t lateScore = (int16_t)( (score + 0x8000) >> 16);

    // pawn structure
    for (int i=1;i<=8;i++) {
        // Isolated pawns
        if ((b->pawnCounts[0][i-1] == 0) && (b->pawnCounts[0][i+1] == 0)) score += b->pawnCounts[0][i] * isolated[i];
        if ((b->pawnCounts[1][i-1] == 0) && (b->pawnCounts[1][i+1] == 0)) score -= b->pawnCounts[1][i] * isolated[i];
    }

    // mobility
    score += -b->mobilities[0] + b->mobilities[1];
    
    // tempo bonus
    score += S(31,28);

    score = ((b->phase * earlyScore) + ((44-b->phase)*lateScore))/44; 

    if (!b->whiteToMove) score = -score;
    return score;
}*/