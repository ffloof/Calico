
int mailbox[64] = {
    21, 22, 23, 24, 25, 26, 27, 28,
    31, 32, 33, 34, 35, 36, 37, 38,
    41, 42, 43, 44, 45, 46, 47, 48,
    51, 52, 53, 54, 55, 56, 57, 58,
    61, 62, 63, 64, 65, 66, 67, 68,
    71, 72, 73, 74, 75, 76, 77, 78,
    81, 82, 83, 84, 85, 86, 87, 88,
    91, 92, 93, 94, 95, 96, 97, 98
};

int phases[14] = {0,0,0,0,2,2,2,2,3,3,8,8,0};

#define S(a, b) (a + (b * 0x10000))

int material[7] = {S(0,0),S(100,100),S(400,290),S(440,320),S(575,550),S(1200,1000), S(0,0)};

int activity[7][64] = {
    {},
    { // Pawn
        S(0,0),     S(0,0),     S(0,0),     S(0,0),     S(0,0),     S(0,0),     S(0,0),     S(0,0),     
        S(155,155), S(170,170), S(120,120), S(125,125), S(120,120), S(145,145), S(110,110), S(95,95),   
        S(45,45),   S(60,60),   S(60,60),   S(55,55),   S(65,65),   S(60,60),   S(60,60),   S(35,35),   
        S(10,10),   S(20,20),   S(10,10),   S(15,15),   S(20,20),   S(5,5),     S(15,15),   S(-5,-5),   
        S(-10,-10), S(0,0),     S(0,0),     S(5,5),     S(10,10),   S(0,0),     S(5,5),     S(-15,-15), 
        S(-15,-15), S(0,0),     S(0,0),     S(-5,-5),   S(-5,-5),   S(-5,-5),   S(15,15),   S(-15,-15), 
        S(-15,-15), S(0,0),     S(-10,-10), S(-10,-10), S(-15,-15), S(10,10),   S(20,20),   S(-15,-15), 
        S(0,0),     S(0,0),     S(0,0),     S(0,0),     S(0,0),     S(0,0),     S(0,0),     S(0,0),     
    }, 
    { // Knight
        S(-130,-130), S(-75,-75),   S(-30,-30),   S(-45,-45),   S(15,15),     S(-70,-70),   S(-45,-45),   S(-120,-120), 
        S(-55,-55),   S(-30,-30),   S(25,25),     S(15,15),     S(5,5),       S(20,20),     S(-10,-10),   S(-40,-40),   
        S(-40,-40),   S(20,20),     S(25,25),     S(40,40),     S(45,45),     S(65,65),     S(30,30),     S(0,0),       
        S(-15,-15),   S(10,10),     S(20,20),     S(40,40),     S(30,30),     S(45,45),     S(10,10),     S(0,0),       
        S(-20,-20),   S(-5,-5),     S(15,15),     S(20,20),     S(20,20),     S(20,20),     S(10,10),     S(-15,-15),   
        S(-25,-25),   S(-10,-10),   S(-10,-10),   S(10,10),     S(15,15),     S(5,5),       S(0,0),       S(-25,-25),   
        S(-40,-40),   S(-40,-40),   S(-15,-15),   S(-10,-10),   S(-5,-5),     S(-5,-5),     S(-20,-20),   S(-35,-35),   
        S(-80,-80),   S(-30,-30),   S(-45,-45),   S(-30,-30),   S(-25,-25),   S(-30,-30),   S(-40,-40),   S(-50,-50),   
    },
    { // Bishop
        S(-25,-25),   S(-10,-10),   S(-55,-55),   S(-25,-25),   S(-20,-20),   S(-30,-30),   S(-5,-5),     S(-20,-20),   
        S(-20,-20),   S(5,5),       S(-5,-5),     S(-15,-15),   S(10,10),     S(25,25),     S(5,5),       S(-35,-35),   
        S(-10,-10),   S(15,15),     S(20,20),     S(20,20),     S(15,15),     S(30,30),     S(20,20),     S(0,0),       
        S(-5,-5),     S(5,5),       S(15,15),     S(30,30),     S(25,25),     S(25,25),     S(5,5),       S(0,0),       
        S(-10,-10),   S(5,5),       S(10,10),     S(20,20),     S(20,20),     S(10,10),     S(0,0),       S(-5,-5),     
        S(-10,-10),   S(5,5),       S(10,10),     S(10,10),     S(10,10),     S(15,15),     S(5,5),       S(-5,-5),     
        S(-5,-5),     S(0,0),       S(0,0),       S(0,0),       S(5,5),       S(5,5),       S(10,10),     S(-15,-15),   
        S(-35,-35),   S(-10,-10),   S(-20,-20),   S(-15,-15),   S(-15,-15),   S(-15,-15),   S(-25,-25),   S(-25,-25),
    },
    { // Rook
        S(20,20),     S(25,25),     S(25,25),     S(35,35),     S(40,40),     S(10,10),     S(20,20),     S(25,25),     
        S(20,20),     S(20,20),     S(35,35),     S(40,40),     S(40,40),     S(35,35),     S(15,15),     S(25,25),     
        S(0,0),       S(10,10),     S(15,15),     S(20,20),     S(10,10),     S(20,20),     S(30,30),     S(5,5),       
        S(-15,-15),   S(-5,-5),     S(10,10),     S(10,10),     S(10,10),     S(20,20),     S(-5,-5),     S(-10,-10),   
        S(-20,-20),   S(-15,-15),   S(-5,-5),     S(0,0),       S(0,0),       S(-10,-10),   S(-5,-5),     S(-20,-20),   
        S(-30,-30),   S(-15,-15),   S(-15,-15),   S(-10,-10),   S(-5,-5),     S(-10,-10),   S(-10,-10),   S(-30,-30),   
        S(-30,-30),   S(-15,-15),   S(-15,-15),   S(-5,-5),     S(-5,-5),     S(0,0),       S(-10,-10),   S(-45,-45),   
        S(-15,-15),   S(-5,-5),     S(0,0),       S(5,5),       S(5,5),       S(-5,-5),     S(-20,-20),   S(-30,-30),
    },
    { // Queen
        S(-20,-20),   S(10,10),     S(25,25),     S(20,20),     S(45,45),     S(35,35),     S(25,25),     S(35,35),     
        S(-25,-25),   S(-10,-10),   S(10,10),     S(20,20),     S(20,20),     S(45,45),     S(30,30),     S(30,30),     
        S(-20,-20),   S(-5,-5),     S(5,5),       S(30,30),     S(40,40),     S(50,50),     S(35,35),     S(35,35),     
        S(-15,-15),   S(-5,-5),     S(0,0),       S(15,15),     S(30,30),     S(30,30),     S(30,30),     S(20,20),     
        S(-15,-15),   S(0,0),       S(5,5),       S(20,20),     S(15,15),     S(15,15),     S(20,20),     S(10,10),     
        S(-20,-20),   S(-15,-15),   S(0,0),       S(0,0),       S(0,0),       S(10,10),     S(10,10),     S(5,5),       
        S(-35,-35),   S(-20,-20),   S(-10,-10),   S(-10,-10),   S(-5,-5),     S(-5,-5),     S(-25,-25),   S(-20,-20),   
        S(-20,-20),   S(-30,-30),   S(-20,-20),   S(-20,-20),   S(-15,-15),   S(-35,-35),   S(-30,-30),   S(-55,-55),
    },
    { // King
        S(-75,-85),   S(25,-40),    S(15,-20),    S(-20,-20),   S(-65,-15),   S(-40,15),    S(0,0),       S(10,-20),    
        S(30,-15),    S(-5,15),     S(-25,15),    S(-10,15),    S(-10,15),    S(-5,40),     S(-45,25),    S(-35,10),    
        S(-10,10),    S(25,15),     S(0,25),      S(-20,15),    S(-25,20),    S(5,50),      S(20,45),     S(-25,10),    
        S(-20,-10),   S(-25,20),    S(-15,25),    S(-30,30),    S(-35,25),    S(-30,35),    S(-15,25),    S(-40,0),     
        S(-55,-20),   S(-5,-5),     S(-30,20),    S(-45,25),    S(-55,30),    S(-50,25),    S(-40,10),    S(-60,-15),   
        S(-15,-25),   S(-15,-5),    S(-25,10),    S(-55,20),    S(-50,25),    S(-35,15),    S(-20,5),     S(-30,-10),   
        S(0,-30),     S(5,-15),     S(-10,0),     S(-75,10),    S(-50,15),    S(-20,0),     S(10,-5),     S(5,-20),     
        S(-20,-60),   S(40,-40),    S(10,-25),    S(-65,-15),   S(5,-35),     S(-35,-15),   S(25,-30),    S(15,-50),
    }
};



int PST[14][120] = {};

void initPSQT(){
    for(int piecetype=0;piecetype<=6;piecetype++) {
        for(int i=0;i<64;i++){
            int idx_white = mailbox[i];
            int idx_black = mailbox[i^56];
            PST[(piecetype*2)+1][idx_white] = activity[piecetype][i] + material[piecetype];
            PST[(piecetype*2)][idx_black] = -(activity[piecetype][i] + material[piecetype]);
        }
    }
}

void board::updateEval(int index, int8_t oldPiece, int8_t newPiece) {
    score -= PST[oldPiece][index];
    score += PST[newPiece][index];
    phase -= phases[oldPiece];
    phase += phases[newPiece];
}

int evaluate(board* b) {
    int truePhase = b->phase;
    if (truePhase > 44) truePhase = 44;

    // king safety
    int wKingFile = b->kings[1] % 10;
    int bKingFile = b->kings[0] % 10;

    int score = b->score;

    for (int i=-1;i<=1;i++){
        if (b->pawnCounts[0][wKingFile + i] == 0) score -= S(10,0); // black has open file towards white king
        if (b->pawnCounts[1][wKingFile + i] == 0) score -= S(20,0); // white king pawn shield broken
        if (b->pawnCounts[0][bKingFile + i] == 0) score += S(20,0); // black king pawn shield broken 
        if (b->pawnCounts[1][bKingFile + i] == 0) score += S(10,0); // white has open file towards black king
    }

    int16_t earlyScore = (int16_t) score;
    int16_t lateScore = (int16_t)( (score + 0x8000) >> 16);

    score = ((truePhase * earlyScore) + ((44-truePhase)*lateScore))/44; 

    // pawn structure
    for (int i=1;i<=8;i++) {
        // Isolated pawns
        if ((b->pawnCounts[0][i-1] == 0) && (b->pawnCounts[0][i+1] == 0)) score += b->pawnCounts[0][i] * 15;
        if ((b->pawnCounts[1][i-1] == 0) && (b->pawnCounts[1][i+1] == 0)) score -= b->pawnCounts[1][i] * 15;
    }

    // mobility
    score += -b->mobilities[0] + b->mobilities[1];
    
    if (!b->whiteToMove) score = -score;
    return score + 10; // tempobonus
}